diff --git a/libhif/hif-context.c b/libhif/hif-context.c
index 49f5b66..f092a88 100644
--- a/libhif/hif-context.c
+++ b/libhif/hif-context.c
@@ -31,8 +31,8 @@
 
 #include "config.h"
 
-#include <rpm/rpmlib.h>
 #include <rpm/rpmmacro.h>
+#include <rpm/rpmrc.h>
 
 #include <hawkey/query.h>
 #include <hawkey/packagelist.h>
@@ -1240,7 +1240,7 @@ hif_context_setup (HifContext *context,
 				  "alphaev68", "alphaev7", "alphapca56", NULL } },
 		{ "arm",	{ "armv5tejl", "armv5tel", "armv6l", "armv7l", NULL } },
 		{ "armhfp",	{ "armv7hl", "armv7hnl", NULL } },
-		{ "i386",	{ "i386", "athlon", "geode", "i386",
+		{ "i386",	{ "i386", "athlon", "geode", "pentium2", "pentium3", "pentium4",
 				  "i486", "i586", "i686", NULL } },
 		{ "ia64",	{ "ia64", NULL } },
 		{ "noarch",	{ "noarch", NULL } },
@@ -1317,9 +1317,9 @@ hif_context_setup (HifContext *context,
 	}
 
 	/* get info from RPM */
-	rpmGetOsInfo (&value, NULL);
+	value = rpmExpand ("%{_target_os}", NULL);
 	priv->os_info = g_strdup (value);
-	rpmGetArchInfo (&value, NULL);
+	value = rpmExpand ("%{_target_cpu}", NULL);
 	priv->arch_info = g_strdup (value);
 
 	/* find the base architecture */
diff --git a/libhif/hif-keyring.c b/libhif/hif-keyring.c
index 169668a..ab25e1b 100644
--- a/libhif/hif-keyring.c
+++ b/libhif/hif-keyring.c
@@ -35,7 +35,9 @@
 
 #include <stdlib.h>
 #include <glib.h>
-#include <rpm/rpmlib.h>
+#include <rpm/rpm46compat.h>
+#include <rpm/rpmcli.h>
+#include <rpm/rpmio.h>
 #include <rpm/rpmts.h>
 
 #include "hif-cleanup.h"
@@ -55,7 +57,7 @@
  * Since: 0.1.0
  **/
 gboolean
-hif_keyring_add_public_key (rpmKeyring keyring,
+hif_keyring_add_public_key (const rpmts ts,
 			    const gchar *filename,
 			    GError **error)
 {
@@ -63,10 +65,7 @@ hif_keyring_add_public_key (rpmKeyring keyring,
 	gint rc;
 	gsize len;
 	pgpArmor armor;
-	pgpDig dig = NULL;
-	rpmPubkey pubkey = NULL;
 	uint8_t *pkt = NULL;
-	_cleanup_free_ gchar *data = NULL;
 
 	/* ignore symlinks and directories */
 	if (!g_file_test (filename, G_FILE_TEST_IS_REGULAR))
@@ -74,13 +73,8 @@ hif_keyring_add_public_key (rpmKeyring keyring,
 	if (g_file_test (filename, G_FILE_TEST_IS_SYMLINK))
 		goto out;
 
-	/* get data */
-	ret = g_file_get_contents (filename, &data, &len, error);
-	if (!ret)
-		goto out;
-
 	/* rip off the ASCII armor and parse it */
-	armor = pgpParsePkts (data, &pkt, &len);
+	armor = pgpReadPkts (filename, &pkt, &len);
 	if (armor < 0) {
 		ret = FALSE;
 		g_set_error (error,
@@ -103,7 +97,7 @@ hif_keyring_add_public_key (rpmKeyring keyring,
 	}
 
 	/* test each one */
-	pubkey = rpmPubkeyNew (pkt, len);
+/*	pubkey = rpmPubkeyNew (pkt, len);
 	if (pubkey == NULL) {
 		ret = FALSE;
 		g_set_error (error,
@@ -112,19 +106,19 @@ hif_keyring_add_public_key (rpmKeyring keyring,
 			     "failed to parse public key for %s",
 			     filename);
 		goto out;
-	}
+	} */
 
 	/* does the key exist in the keyring */
-	dig = rpmPubkeyDig (pubkey);
+/*	dig = rpmPubkeyDig (pubkey);
 	rc = rpmKeyringLookup (keyring, dig);
 	if (rc == RPMRC_OK) {
 		ret = TRUE;
 		g_debug ("%s is already present", filename);
 		goto out;
-	}
+	} */
 
 	/* add to rpmdb automatically, without a prompt */
-	rc = rpmKeyringAddKey (keyring, pubkey);
+	rc = rpmcliImportPubkey (ts, pkt, len);
 	if (rc == 1) {
 		ret = TRUE;
 		g_debug ("%s is already added", filename);
@@ -146,10 +140,6 @@ hif_keyring_add_public_key (rpmKeyring keyring,
 out:
 	if (pkt != NULL)
 		free (pkt); /* yes, free() */
-	if (pubkey != NULL)
-		rpmPubkeyFree (pubkey);
-	if (dig != NULL)
-		pgpFreeDig (dig);
 	return ret;
 }
 
@@ -165,7 +155,7 @@ out:
  * Since: 0.1.0
  **/
 gboolean
-hif_keyring_add_public_keys (rpmKeyring keyring, GError **error)
+hif_keyring_add_public_keys (rpmts ts, GError **error)
 {
 	const gchar *gpg_dir = "/etc/pki/rpm-gpg";
 	gboolean ret = TRUE;
@@ -182,7 +172,7 @@ hif_keyring_add_public_keys (rpmKeyring keyring, GError **error)
 		if (filename == NULL)
 			break;
 		path_tmp = g_build_filename (gpg_dir, filename, NULL);
-		ret = hif_keyring_add_public_key (keyring, path_tmp, error);
+		ret = hif_keyring_add_public_key (ts, path_tmp, error);
 	} while (ret);
 	return TRUE;
 }
@@ -191,7 +181,7 @@ hif_keyring_add_public_keys (rpmKeyring keyring, GError **error)
  * hif_keyring_check_untrusted_file:
  */
 gboolean
-hif_keyring_check_untrusted_file (rpmKeyring keyring,
+hif_keyring_check_untrusted_file (
 				  const gchar *filename,
 				  GError **error)
 {
@@ -242,10 +232,10 @@ hif_keyring_check_untrusted_file (rpmKeyring keyring,
 	}
 
 	/* convert and upscale */
-	headerConvert (hdr, HEADERCONV_RETROFIT_V3);
+/*	headerConvert (hdr, HEADERCONV_RETROFIT_V3); */
 
 	/* get RSA key */
-	td = rpmtdNew ();
+	td = malloc (sizeof (*td));
 	rc = headerGet (hdr,
 			RPMTAG_RSAHEADER,
 			td,
@@ -270,7 +260,7 @@ hif_keyring_check_untrusted_file (rpmKeyring keyring,
 	}
 
 	/* make it into a digest */
-	dig = pgpNewDig ();
+	dig = rpmtsDig (ts);
 	rc = pgpPrtPkts (td->data, td->count, dig, 0);
 	if (rc != 0) {
 		g_set_error (error,
@@ -282,7 +272,7 @@ hif_keyring_check_untrusted_file (rpmKeyring keyring,
 	}
 
 	/* does the key exist in the keyring */
-	rc = rpmKeyringLookup (keyring, dig);
+	rc = rpmtsFindPubkey (ts, dig);
 	if (rc != RPMRC_OK) {
 		g_set_error (error,
 		             HIF_ERROR,
@@ -297,18 +287,18 @@ hif_keyring_check_untrusted_file (rpmKeyring keyring,
 	ret = TRUE;
 out:
 	if (dig != NULL)
-		pgpFreeDig (dig);
+		dig = pgpDigFree (dig);
 	if (td != NULL) {
 		rpmtdFreeData (td);
-		rpmtdFree (td);
+		free (td);
 	}
 	if (ts != NULL)
-		rpmtsFree (ts);
+		ts = rpmtsFree (ts);
 	if (hdr != NULL)
-		headerFree (hdr);
+		hdr = headerFree (hdr);
 	if (fd != NULL)
 		Fclose (fd);
 	if (header != NULL)
-		headerFree (header);
+		header = headerFree (header);
 	return ret;
 }
diff --git a/libhif/hif-keyring.h b/libhif/hif-keyring.h
index 035cd2c..939d242 100644
--- a/libhif/hif-keyring.h
+++ b/libhif/hif-keyring.h
@@ -28,14 +28,14 @@
 
 #include <glib.h>
 
-#include <rpm/rpmkeyring.h>
+#include <rpm/rpmts.h>
 
-gboolean	 hif_keyring_add_public_key	(rpmKeyring		 keyring,
+gboolean	 hif_keyring_add_public_key	(const rpmts		 ts,
 						 const gchar		*filename,
 						 GError			**error);
-gboolean	 hif_keyring_add_public_keys	(rpmKeyring		 keyring,
+gboolean	 hif_keyring_add_public_keys	(rpmts                   ts,
 						 GError			**error);
-gboolean	 hif_keyring_check_untrusted_file (rpmKeyring		 keyring,
+gboolean	 hif_keyring_check_untrusted_file (
 						 const gchar		*filename,
 						 GError			**error);
 
diff --git a/libhif/hif-rpmts.c b/libhif/hif-rpmts.c
index 7f2b431..2261659 100644
--- a/libhif/hif-rpmts.c
+++ b/libhif/hif-rpmts.c
@@ -35,9 +35,12 @@
 #endif
 
 #include <glib.h>
-#include <rpm/rpmlib.h>
+#define _RPMLOG_INTERNAL
+#include <rpm/rpm46compat.h>
+#include <rpm/pkgio.h>
 #include <rpm/rpmlog.h>
 #include <rpm/rpmdb.h>
+#include <rpm/rpmio.h>
 
 #include "hif-cleanup.h"
 #include "libhif.h"
@@ -241,10 +244,17 @@ hif_rpmts_get_problem_str (rpmProblem prob)
 				       diskspace,
 				       generic_str);
 		break;
-	case RPMPROB_OBSOLETES:
-		str = g_strdup_printf ("package %s is obsoleted by %s",
-				       pkg_nevr,
-				       pkg_nevr_alt);
+	case RPMPROB_RDONLY:
+		str = g_strdup_printf ("tried to install package on read-only filesystem");
+		break;
+	case RPMPROB_BADPRETRANS:
+		str = g_strdup_printf ("bad %%pretrans?"); // unimplemented acc. to rpmps.h
+		break;
+	case RPMPROB_BADPLATFORM:
+		str = g_strdup_printf ("package %s is for a different platform", pkg_nevr);
+		break;
+	case RPMPROB_NOREPACKAGE:
+		str = g_strdup_printf ("re-packaged package %s is missing", pkg_nevr);
 		break;
 	}
 	return str;
@@ -308,7 +318,7 @@ hif_rpmts_look_for_problems (rpmts ts, GError **error)
 			     HIF_ERROR_INTERNAL_ERROR,
 			     "Error running transaction and no problems were reported!");
 out:
-	rpmpsFree (probs);
+	probs = rpmpsFree (probs);
 	return ret;
 }
 
@@ -321,11 +331,11 @@ hif_rpmts_log_handler_cb (rpmlogRec rec, rpmlogCallbackData data)
 	GString **string = (GString **) data;
 
 	/* only log errors */
-	if (rpmlogRecPriority (rec) != RPMLOG_ERR)
+	if (rec->pri != RPMLOG_ERR)
 		return RPMLOG_DEFAULT;
 
 	/* do not log internal BDB errors */
-	if (g_strstr_len (rpmlogRecMessage (rec), -1, "BDB") != NULL)
+	if (g_strstr_len (rec->message, -1, "BDB") != NULL)
 		return 0;
 
 	/* create string if required */
@@ -335,7 +345,7 @@ hif_rpmts_log_handler_cb (rpmlogRec rec, rpmlogCallbackData data)
 	/* if text already exists, join them */
 	if ((*string)->len > 0)
 		g_string_append (*string, ": ");
-	g_string_append (*string, rpmlogRecMessage (rec));
+	g_string_append (*string, rec->message);
 
 	/* remove the trailing /n which rpm does */
 	if ((*string)->len > 0)
@@ -384,7 +394,7 @@ hif_rpmts_find_package (rpmts ts, HyPackage pkg, GError **error)
 	}
 
 	/* success */
-	headerLink (hdr);
+	hdr = headerLink (hdr);
 out:
 	rpmlogSetCallback (NULL, NULL);
 	if (iter != NULL)
@@ -430,6 +440,6 @@ hif_rpmts_add_remove_pkg (rpmts ts, HyPackage pkg, GError **error)
 	}
 out:
 	if (hdr != NULL)
-		headerFree (hdr);
+		hdr = headerFree (hdr);
 	return ret;
 }
diff --git a/libhif/hif-source.c b/libhif/hif-source.c
index 44fd373..06b3fc7 100644
--- a/libhif/hif-source.c
+++ b/libhif/hif-source.c
@@ -44,6 +44,7 @@
 #include <glib/gstdio.h>
 #include <hawkey/util.h>
 #include <librepo/librepo.h>
+#include <rpm/rpmio.h>
 #include <rpm/rpmts.h>
 
 #include "hif-cleanup.h"
@@ -1230,15 +1231,12 @@ hif_source_add_public_key (HifSource *source, GError **error)
 {
 	HifSourcePrivate *priv = GET_PRIVATE (source);
 	gboolean ret;
-	rpmKeyring keyring;
 	rpmts ts;
 
 	/* then import to rpmdb */
 	ts = rpmtsCreate ();
-	keyring = rpmtsGetKeyring (ts, 1);
-	ret = hif_keyring_add_public_key (keyring, priv->pubkey_tmp, error);
-	rpmKeyringFree (keyring);
-	rpmtsFree (ts);
+	ret = hif_keyring_add_public_key (ts, priv->pubkey_tmp, error);
+	ts = rpmtsFree (ts);
 	return ret;
 }
 
diff --git a/libhif/hif-transaction.c b/libhif/hif-transaction.c
index ee07859..99619a0 100644
--- a/libhif/hif-transaction.c
+++ b/libhif/hif-transaction.c
@@ -30,7 +30,8 @@
 
 #include "config.h"
 
-#include <rpm/rpmlib.h>
+#include <rpm/rpm46compat.h>
+#include <rpm/rpmio.h>
 #include <rpm/rpmts.h>
 #include <rpm/rpmlog.h>
 
@@ -54,7 +55,6 @@ typedef struct _HifTransactionPrivate	HifTransactionPrivate;
 struct _HifTransactionPrivate
 {
 	HifDb			*db;
-	rpmKeyring		 keyring;
 	rpmts			 ts;
 	HifContext		*context;	/* weak reference */
 	GPtrArray		*sources;
@@ -89,8 +89,7 @@ hif_transaction_finalize (GObject *object)
 
 	g_ptr_array_unref (priv->pkgs_to_download);
 	g_timer_destroy (priv->timer);
-	rpmKeyringFree (priv->keyring);
-	rpmtsFree (priv->ts);
+	priv->ts = rpmtsFree (priv->ts);
 
 	if (priv->db != NULL)
 		g_object_unref (priv->db);
@@ -119,7 +118,6 @@ hif_transaction_init (HifTransaction *transaction)
 {
 	HifTransactionPrivate *priv = GET_PRIVATE (transaction);
 	priv->ts = rpmtsCreate ();
-	priv->keyring = rpmtsGetKeyring (priv->ts, 1);
 	priv->timer = g_timer_new ();
 	priv->pkgs_to_download = g_ptr_array_new_with_free_func ((GDestroyNotify) hy_package_free);
 }
@@ -380,7 +378,7 @@ hif_transaction_check_untrusted (HifTransaction *transaction,
 		}
 
 		/* check file */
-		if (!hif_keyring_check_untrusted_file (priv->keyring, fn, &error_local)) {
+		if (!hif_keyring_check_untrusted_file (fn, &error_local)) {
 
 			/* probably an i/o error */
 			if (!g_error_matches (error_local,
@@ -479,19 +477,65 @@ hif_transaction_rpmcb_type_to_string (const rpmCallbackType what)
 	case RPMCALLBACK_SCRIPT_ERROR:
 		type = "script-error";
 		break;
-	case RPMCALLBACK_SCRIPT_START:
-		type = "script-start";
-		break;
-	case RPMCALLBACK_SCRIPT_STOP:
-		type = "script-stop";
-		break;
-	case RPMCALLBACK_INST_STOP:
-		type = "install-stop";
-		break;
 	}
 	return type;
 }
 
+static inline const char * headerGetString(Header h, int32_t tag)
+{
+    const char *res = NULL;
+    struct rpmtd_s td;
+
+    if (headerGet(h, tag, &td, HEADERGET_MINMEM)) {
+	if (rpmtdCount(&td) == 1) {
+	    res = rpmtdGetString(&td);
+	}
+	rpmtdFreeData(&td);
+    }
+    return res;
+}
+
+static inline uint64_t rpmtdGetNumber(rpmtd td)
+{
+    uint64_t val = 0;
+    int ix;
+    assert(td != NULL);
+    ix = (td->ix >= 0 ? td->ix : 0);
+
+    switch (td->type) {
+    case RPM_INT64_TYPE:
+	val = *((uint64_t *) td->data + ix);
+	break;
+    case RPM_INT32_TYPE:
+	val = *((uint32_t *) td->data + ix);
+	break;
+    case RPM_INT16_TYPE:
+	val = *((uint16_t *) td->data + ix);
+	break;
+    case RPM_INT8_TYPE:
+    case RPM_CHAR_TYPE:
+	val = *((uint8_t *) td->data + ix);
+	break;
+    default:
+	break;
+    }
+    return val;
+}
+
+static inline uint64_t headerGetNumber(Header h, int32_t tag)
+{
+    uint64_t res = 0;
+    struct rpmtd_s td;
+
+    if (headerGet(h, tag, &td, HEADERGET_EXT)) {
+	if (rpmtdCount(&td) == 1) {
+	    res = rpmtdGetNumber(&td);
+	}
+	rpmtdFreeData(&td);
+    }
+    return res;
+}
+
 /**
  * hif_find_pkg_from_header:
  **/
@@ -786,7 +830,6 @@ hif_transaction_ts_progress_cb (const void *arg,
 		/* don't do anything */
 		break;
 
-	case RPMCALLBACK_INST_STOP:
 	case RPMCALLBACK_UNINST_STOP:
 
 		/* phase complete */
@@ -800,8 +843,6 @@ hif_transaction_ts_progress_cb (const void *arg,
 	case RPMCALLBACK_UNPACK_ERROR:
 	case RPMCALLBACK_CPIO_ERROR:
 	case RPMCALLBACK_SCRIPT_ERROR:
-	case RPMCALLBACK_SCRIPT_START:
-	case RPMCALLBACK_SCRIPT_STOP:
 	case RPMCALLBACK_UNKNOWN:
 	case RPMCALLBACK_REPACKAGE_PROGRESS:
 	case RPMCALLBACK_REPACKAGE_START:
@@ -1271,7 +1312,7 @@ hif_transaction_commit (HifTransaction *transaction,
 		goto out;
 
 	/* import all GPG keys */
-	ret = hif_keyring_add_public_keys (priv->keyring, error);
+	ret = hif_keyring_add_public_keys (priv->ts, error);
 	if (!ret)
 		goto out;
 
@@ -1289,15 +1330,7 @@ hif_transaction_commit (HifTransaction *transaction,
 
 	/* setup the transaction */
 	tmp = hif_context_get_install_root (priv->context);
-	rc = rpmtsSetRootDir (priv->ts, tmp);
-	if (rc < 0) {
-		ret = FALSE;
-		g_set_error_literal (error,
-				     HIF_ERROR,
-				     HIF_ERROR_INTERNAL_ERROR,
-				     "failed to set root");
-		goto out;
-	}
+	rpmtsSetRootDir (priv->ts, tmp);
 	rpmtsSetNotifyCallback (priv->ts,
 				hif_transaction_ts_progress_cb,
 				transaction);
